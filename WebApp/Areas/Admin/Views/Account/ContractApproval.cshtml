@inject WebApp.Configs.ApiConfigs ApiConfigs
@{
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
<style>
    .hidden {
        display: none !important;
    }

    .flex-shrink-0 {
        height: 60px;
    }
    /* Căn chỉnh toàn bảng */
    #pendingContracts {
        margin-top: 0 !important; /* Giảm lề trên */
        padding-top: 0 !important;
        border-collapse: collapse; /* Gộp đường viền cho gọn */
        font-size: 14px; /* Cỡ chữ hợp lý */
        line-height: 1.4; /* Giảm chiều cao dòng */
    }

        /* Đảm bảo mỗi ô có độ rộng hợp lý và sát nhau hơn */
        #pendingContracts th, #pendingContracts td {
            padding: 4px 8px; /* Ít padding hơn */
            text-align: left;
            vertical-align: middle; /* Căn giữa theo chiều dọc */
            border: 1px solid #e3e3e3;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            word-wrap: break-word; /* Cho phép bẻ dòng trong các ô dài mà không bị tràn */
        }
        /* Cải thiện giao diện bảng khi có nội dung dài */
        #pendingContracts tbody tr {
            word-wrap: break-word; /* Cho phép bẻ dòng trong các ô dài */
        }

            #pendingContracts tbody tr:hover {
                background-color: #f9f9f9;
                cursor: pointer;
            }
        /* Giảm khoảng cách giữa dòng tiêu đề và các hàng dữ liệu */
        #pendingContracts th {
            padding-top: 3px; /* Giảm khoảng cách trên tiêu đề */
            padding-bottom: 3px; /* Giảm khoảng cách dưới tiêu đề */
            text-align: center; /* Căn giữa văn bản tiêu đề */
            background-color: #f1f1f1; /* Đặt màu nền cho tiêu đề */
            font-weight: bold; /* Làm đậm các tiêu đề */
        }

        /* Các phần tử trong bảng có thể điều chỉnh theo nhu cầu */
        #pendingContracts td {
            font-size: 14px;
        }

        /* Thêm hiệu ứng hover cho các hàng trong bảng */
        #pendingContracts tbody tr:hover {
            background-color: #e7e7e7;
            cursor: pointer;
        }

        /* Đảm bảo không bị tràn khi có văn bản dài */
        #pendingContracts td {
            text-overflow: ellipsis;
            overflow: hidden;
            white-space: nowrap;
        }

    .card-body {
        padding-top: 5px;
    }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: 0.4s;
        border-radius: 30px;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 24px;
            width: 24px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: 0.4s;
            border-radius: 50%;
        }

    input:checked + .slider {
        background-color: #4CAF50;
    }

        input:checked + .slider:before {
            transform: translateX(30px);
        }

    .p-3 {
        padding-left: 1rem !important;
        padding-right: 1rem !important;
        padding-top: 0px;
        margin-top: 10px
    }
</style>
<body>

    <div id="pendingContractsSection" class="container-fluid d-flex flex-column vh-100">

        <div class="row flex-grow-1 overflow-auto">
            <div class="col-12">
                <div class="card p-3 h-100">
                   @*  <h5>Danh sách hợp đồng chờ duyệt</h5> *@
                    <div class="table-responsive h-100">
                        <table id="pendingContracts" class="table table-striped table-bordered">
                            <thead class="table-light">
                                <tr>
                                    <th>STT</th>
                                    <th>Mã hợp đồng</th>
                                    <th>Tên công ty</th>
                                    <th>File đã ký</th>
                                    <th>Hành động</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Dữ liệu hợp đồng chờ duyệt sẽ render ở đây -->
                            </tbody>
                        </table>

                        <!-- iframe hiển thị PDF -->
                        <div id="pdfViewer" class="hidden mt-3" style="border:none; text-align: center;">
                            <iframe id="pdfFrame" src="" width="90%" height="470px" style="border:none;"></iframe>

                            <div class="mt-2" id="pfxSection" class="hidden">
                                <!-- Chọn file chứng thư số (.pfx) -->
                                <input type="file" id="certInput" accept=".pfx" />
                                <input type="password" id="certPassword" placeholder="Mật khẩu chứng thư số" />
                                <button id="signBtn" class="btn btn-primary">✍️ Ký hợp đồng      </button>
                                <button id="confirmSaveBtn" class="btn btn-success" disabled>Lưu hợp đồng đã ký</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>

<!-- Modal confirm -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="xacNhanModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="xacNhanModalLabel">Xác nhận hành động</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <span class="" id="contentModalConfirm"></span>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal"> Đóng </button>
                <button type="button" class="btn btn-primary" id="confirmButton1">Xác nhận</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal success-->
<div class="modal fade" id="ModalSuccess" tabindex="-1" role="dialog" aria-labelledby="ModalSuccess" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body text-center bg-green">
                <span id="contentModalSuccess"></span>
            </div>
        </div>
    </div>
</div>

<!-- Modal thông báo lỗi -->
<div class="modal fade" id="ModalError" tabindex="-1" aria-labelledby="ModalErrorLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="ModalErrorLabel">Lỗi</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="contentModalError"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="btnCloseModal">Đóng</button>
            </div>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    let signedStateMap = {};
    var Department = "@User.FindFirst("Department")?.Value";
    var StaffId = "@User.FindFirst("StaffId")?.Value";

    const tokenJWT = localStorage.getItem("accessToken");

    document.addEventListener("DOMContentLoaded", function () {
        if ($.fn.DataTable.isDataTable("#pendingContracts")) {
            $("#pendingContracts").DataTable().destroy(); // Xóa DataTable cũ trước khi tạo lại
        }

        var table = $('#pendingContracts').DataTable({
            processing: true,
            serverSide: true,
            paging: true,
            searching: false,
            searchDelay: 400,
            // scrollY: false,
            iDisplayLength: 7,
            bLengthChange: false,
            language: {
                info: "Hiển thị _START_ đến _END_ của _TOTAL_ tài khoản",
                lengthMenu: "Hiển thị _MENU_  tài khoản",
                //search: "Tìm kiếm",
                processing: "Đang tải dữ liệu...",
                paginate: {
                    previous: "Trước",
                    next: "Tiếp theo",
                    last: "Cuối"
                }
            },

            ajax: {
                url: "/admin/account/GetListPending",
                type: "POST",
                headers: {
                    "Authorization": "Bearer " + tokenJWT
                },
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                beforeSend: function () {
                    // Optional: Show loading indicator
                },
                data: function (data) {
                    var pendingContractsA = $("#pendingContracts").DataTable();
                    var settings = pendingContractsA.settings();
                    var currentPageIndex = Math.ceil(settings[0]._iDisplayStart / settings[0]._iDisplayLength) + 1;

                    return JSON.stringify({
                        PageSize: 7,
                        Page: currentPageIndex,
                        Keyword: "", // Lấy giá trị từ input tìm kiếm
                        Category: ""
                    });
                },
                dataSrc: function (res) {
                    signedStateMap = {}; // Reset map trạng thái
                    console.log("Ket qua hop dong cho duyet", res.pendingContracts);

                    if (res.success && res.pendingContracts.results) {
                        res.pendingContracts.results.forEach(contract => {
                            const key = contract.contractNumber.toLowerCase(); // dùng lowercase để tránh sai sót
                            //const status = contract.constatus.trim().toLowerCase();
                            //signedStateMap[key] = (status === "ký hoàn tất") ? 1 : 0;
                            const status = contract.constatus;
                            //  signedStateMap[key] = (status === "Đã ký") ? 1 : 0;
                            signedStateMap[key] = (status == 1) ? 1 : 0;

                        });
                        return res.pendingContracts.results;
                    }

                    return [];
                },
                dataFilter: function (data) {
                    var page = $.parseJSON(data);
                    if (!page.success || !page.pendingContracts) {
                        page.recordsTotal = 0;
                        page.recordsFiltered = 0;
                        return JSON.stringify(page);
                    }
                    page.recordsTotal = page.pendingContracts.rowCount || 0;
                    page.recordsFiltered = page.pendingContracts.rowCount || 0;
                    return JSON.stringify(page);
                },
                error: function (xhr, status, error) {
                    console.error("Lỗi khi lấy dữ liệu:", error);
                    showError("Không thể tải danh sách công ty. Vui lòng thử lại!");

                }
            },
            columns: [
                {
                    data: null,
                    width: "5%",
                    render: function (data, type, row, meta) {
                        return meta.row + 1;
                    }
                },
                { data: "contractNumber", width: "20%" },
                { data: "companyName", width: "25%" },
                {
                    data: "confileName",
                    width: "25%",
                    render: function (data, type, row) {
                        if (!data) return "<span class='text-muted'>Chưa có file</span>";

                        const fileName = data.split('/').pop();
                        //const folder = row.constatus === "Chưa ký" ? "temp-pdfs" : "signed-contracts";
                        const folder = row.constatus == 0 ? "temp-pdfs" : "signed-contracts";

                        return `
                            <a href="/temp-pdfs/${fileName}"
                                target="_blank"
                                class="pdf-link"
                                data-id="${row.contractNumber}"
                                data-confilename="${fileName}"
                                data-realpath="${row.filePath}"
                                data-folder="${folder}"
                                data-email="${row.rootAccount}">
                                <i class="fa-solid fa-file-pdf text-danger" style="font-size: 1.3rem;"></i>Xem hợp đồng
                            </a>`;
                    }
                },
                {
                    data: "constatus",
                    width: "25%",
                    render: function (data, type, row) {
                        const contractNumber = row.contractNumber;
                        const normalizedStatus = row.constatus;

                        //if (normalizedStatus === "Chưa ký") {
                        if (normalizedStatus == 0) {
                            return `<span class="text-muted">Chờ người phụ trách ký</span>`;
                        }

                        // if (normalizedStatus === "Đã ký") {
                        if (normalizedStatus == 1) {
                            return `
                                <div class="d-flex justify-content-center gap-2">
                                    <button class="btn btn-sm btn-primary btn-send-client"
                                            title="Gửi mail cho khách ký"
                                            data-contractnumber="${contractNumber}"
                                                data-confilename="${row.confileName}"
                                                data-filepath="${row.filePath}">
                                        <i class="fa-solid fa-paper-plane"></i> Gửi khách ký
                                    </button>
                                </div>`;
                        }
                        //if (normalizedStatus === "Chờ client ký") {
                        if (normalizedStatus == 2) {
                            return `<span class="text-muted">Chờ khách hàng ký</span>`;
                        }

                        if (normalizedStatus == 3) {
                            const fileName = row.confileName;
                            const folder = "signed-contracts"; // vì đã ký và chờ duyệt
                            const realPath = `/${folder}/${fileName}`;
                            return `
                                    <div class="d-flex justify-content-center gap-2">
                                            <button class="btn btn-sm btn-success btn-browse"
                                                title="Duyệt hợp đồng"
                                                data-contractnumber="${contractNumber}"
                                                data-confilename="${fileName}"
                                                data-filepath="${realPath}">
                                            <i class="fa-solid fa-circle-check"></i> Duyệt hợp đồng
                                        </button>
                                    </div>`;
                        }

                        //if (normalizedStatus === "Ký hoàn tất") {
                        if (normalizedStatus == 4) {
                            return `<span class="text-muted">Chờ thanh toán</span>`;
                        }
                        //if (normalizedStatus === "Đã thanh toán") {
                        if (normalizedStatus == 5) {
                            const fileName = row.confileName;
                            const folder = "signed-contracts"; // vì đã ký và chờ duyệt
                            const realPath = `/${folder}/${fileName}`;
                            return `
                                    <div class="d-flex justify-content-center gap-2">
                                        <button class="btn btn-sm btn-success btn-approve"
                                                title="Duyệt hợp đồng"
                                                data-contractnumber="${contractNumber}"
                                                data-confilename="${fileName}"
                                                data-filepath="${realPath}">
                                            <i class="fa-solid fa-circle-check"></i> Xác nhận hoàn tất
                                        </button>
                                    </div>`;
                        }
                        return `<span class="text-muted">Chưa ký</span>`;
                    }
                }
            ],

            createdRow: function (row, data, dataIndex) {
                $(row).data("fullData", data); // Lưu toàn bộ dữ liệu vào row
            },

            columnDefs: [{
                "defaultContent": "-",
                "targets": "_all"
            }]
           

        });
    });

    //xem hợp đồng
    $('#pendingContracts').on('click', '.pdf-link', function (e) {
        e.preventDefault();

        const $link = $(e.target).closest('.pdf-link');
        const contractNumber = $link.attr('data-id');
        const confileName = $link.attr('data-confilename'); // dùng attr thay vì data
        const realFilePath = $link.attr('data-realpath'); // ✅ đường dẫn thực
        const folder = $link.attr('data-folder');
        const rootaccount = $link.attr('data-email');
        console.log("Clicked contract", contractNumber);
        console.log("confileName", confileName);

        if (!contractNumber || !confileName || !folder) {
            console.error("Thiếu thông tin hợp đồng (contractNumber, confileName, folder)");
            showError("Không thể hiển thị hợp đồng. Thiếu thông tin cần thiết");
            return;
        }
        const baseSiteUrl = "@ApiConfigs.BaseSiteUrl".replace(/\/+$/, '');
        const pdfUrl = `${baseSiteUrl}/${folder}/${confileName}`;

        $('#signBtn').data('fileName', confileName);
        $('#signBtn').data('email', rootaccount);
        $('#signBtn').data('contractNumber', contractNumber);
        $('#signBtn').data('realFilePath', realFilePath);

        //('#pdfViewer iframe').attr('src', pdfUrl);
        //$('#pdfViewer').removeClass('hidden');\
        const $pdfViewer = $('#pdfViewer');
        const currentSrc = $('#pdfViewer iframe').attr('src');

        if (currentSrc === pdfUrl && !$pdfViewer.hasClass('hidden')) {
            // Đã mở đúng file này rồi => toggle ẩn
            $pdfViewer.addClass('hidden');
            $('#pdfViewer iframe').attr('src', '');
        } else {
            // Mở file mới
            $('#pdfViewer iframe').attr('src', pdfUrl);
            $pdfViewer.removeClass('hidden');
        }

        const signed = signedStateMap[contractNumber.toLowerCase()];
        if (signed === 1) {
            //  $('#btnSignContract').addClass('hidden');
            $('#pfxSection').addClass('hidden');

        } else {
            if (Department === "Admin") {
                $('#pfxSection').addClass('hidden');
            } else if (Department === "Director") {
                $('#pfxSection').removeClass('hidden');
            }
            //$('#btnSignContract').removeClass('hidden');
        }
    });

    let signedPdfBlob = null;

    //boss ký
    document.getElementById("signBtn").addEventListener("click", async () => {
        const pfxFile = document.getElementById("certInput").files[0];
        const password = document.getElementById("certPassword").value;
        const fileName = $('#signBtn').data('fileName');

        if (!pfxFile || !password) {
            showError("Vui lòng chọn file chứng thư số và nhập mật khẩu");
            return;
        }

        const formData = new FormData();
        formData.append("pfxFile", pfxFile);
        formData.append("password", password);
        formData.append("fileName", fileName);
        formData.append("staffid", StaffId);

        // Hiển thị modal xác nhận
        document.getElementById("contentModalConfirm").innerHTML = "Bạn có chắc muốn ký với thông tin này không?";
        const modalConfirmEl = document.getElementById("confirmModal");
        const modalConfirm = new bootstrap.Modal(modalConfirmEl);
        modalConfirm.show();

        // Xử lý khi bấm nút xác nhận
        $("#confirmButton1").off("click").on("click", async function () {
            modalConfirm.hide();
            try {
                const res = await fetch("/admin/account/SignPdfWithPfx", {
                    method: "POST",
                    headers: {
                        "Authorization": "Bearer " + tokenJWT
                    },
                    body: formData
                });

                if (!res.ok) {
                    const errJson = await res.json();
                    throw new Error(errJson.message || "Ký thất bại");
                }

                signedPdfBlob = await res.blob();
                const url = URL.createObjectURL(signedPdfBlob);

                // ✅ Gán vào iframe chứ không phải div
                document.getElementById("pdfFrame").src = url;

                // ✅ Hiện vùng xem file PDF đã ký
                document.getElementById("pdfViewer").classList.remove("hidden");

                // ✅ Hiển thị modal thành công
                document.getElementById("contentModalSuccess").innerHTML =
                    "Ký hợp đồng thành công, xem hợp đồng đã ký bên trên";

                const modal = new bootstrap.Modal(document.getElementById("ModalSuccess"));
                modal.show();
                document.getElementById("confirmSaveBtn").disabled = false;


            } catch (err) {
                showError("Ký thất bại: " + err.message);
            }
        });

    });

    // Khi boss xác nhận lưu file ký đè lên file gốc
    document.getElementById("confirmSaveBtn").addEventListener("click", async () => {

        if (!signedPdfBlob) {
            showError("Chưa có hợp đồng ký tạm để lưu");
            return;
        }
        // Hiển thị modal xác nhận
        document.getElementById("contentModalConfirm").innerHTML = "Bạn có chắc muốn ký với thông tin này không?";
        const modalConfirmEl = document.getElementById("confirmModal");
        const modalConfirm = new bootstrap.Modal(modalConfirmEl);
        modalConfirm.show();

        // Xử lý khi bấm nút xác nhận
        $("#confirmButton1").off("click").on("click", async function () {
            modalConfirm.hide();
            try {
                // ✅ Lấy dữ liệu từ button đã được gán trước đó
                const fileName = $('#signBtn').data('fileName');
                const email = $('#signBtn').data('email');
                const contractNumber = $('#signBtn').data('contractNumber');

                const formData = new FormData();
                formData.append("fileName", fileName);
                formData.append("signedPdf", signedPdfBlob, "signed_" + fileName); // tên file mới để lưu
                formData.append("contractNumber", contractNumber);
                formData.append("staffid", StaffId);

                const res = await fetch("/admin/account/SaveSignedPdf", {
                    method: "POST",
                    headers: {
                        "Authorization": "Bearer " + tokenJWT
                    },
                    body: formData
                });

                if (!res.ok) throw new Error("Lưu file ký thất bại");

                document.getElementById("contentModalSuccess").innerHTML = "Lưu hợp đồng đã ký thành công!";

                $("#ModalSuccess").modal("show");

                // ✅ Đóng viewer sau khi lưu thành công
                $('#pdfViewer iframe').attr('src', '');
                $('#pdfViewer').addClass('hidden');
                document.getElementById("confirmSaveBtn").disabled = true;

                $('#pendingContracts').DataTable().ajax.reload(null, false);


            } catch (err) {
                showError("Lưu thất bại: " + err.message);
                return;
            }
        });
    });

    // //nút ký của Director
    // $('#btnSignContract').on('click', function () {
    //     const contractNumber = $(this).data('contractNumber');
    //     const filePath = $(this).data('filePath'); // ✅ Đúng đường dẫn nội bộ

    //     $.ajax({
    //         url: `/admin/account/SignPdfWithAdminCertificate`, // Không cần truyền staffId trong URL nữa
    //         type: "POST",
    //         contentType: "application/json",
    //         headers: {
    //             "Authorization": "Bearer " + tokenJWT
    //         },
    //         data: JSON.stringify({
    //             StaffId: StaffId,
    //             FilePath: filePath,
    //             ContractNumber: contractNumber
    //         }),
    //         success: function (res) {
    //             if (res.success) {
    //                 signedStateMap[contractNumber] = 1; // Cập nhật trạng thái
    //                 $('#btnSignContract').addClass('hidden');
    //                 $('#pdfViewer').addClass('hidden');
    //                 $('#pendingContracts').DataTable().ajax.reload(null, false); // Reload bảng không mất trang
    //                 document.getElementById("contentModalSuccess").innerHTML = "Ký hợp đồng thành công!";
    //                 $("#ModalSuccess").modal("show");
    //             } else {
    //                 showError("Không thể ký hợp đồng. Vui lòng thử lại.");
    //             }
    //         },
    //         error: function (xhr) {
    //             showError("Lỗi khi gọi API ký hợp đồng!");
    //         }
    //     });
    // });


    //gửi cho client ký
    $('#pendingContracts').on('click', '.btn-send-client', function () {
        const contractNumber = $(this).data('contractnumber');
        //const fileName = $(this).data('confilename');
        const filePath = $(this).data('filepath');

        $.ajax({
            url: '/admin/Account/SendEmailtoclient',
            type: 'POST',
            headers: {
                "Authorization": "Bearer " + tokenJWT
            },
            contentType: 'application/json',
            data: JSON.stringify({
                StaffId: StaffId,
                FilePath: filePath,
                ContractNumber: contractNumber
            }),
            success: function (res) {
                if (res.success) {
                    document.getElementById("contentModalSuccess").innerHTML = "Đã gửi hợp đồng thành công!";
                    $("#ModalSuccess").modal("show");

                    $('#pdfViewer').addClass('hidden');
                    $('#pendingContracts').DataTable().ajax.reload(null, false);

                } else {
                    showError("Gửi hợp đồng thất bại: " + (res.message || ""));
                }
            },
            error: function () {
                console.error("Lỗi khi duyệt:", error);
                showError("Lỗi khi duyệt hợp đồng. Vui lòng thử lại.");
            }
        });
    });

    //duyệt file hợp đồng
    $('#pendingContracts').on('click', '.btn-browse', function () {
        const contractNumber = $(this).data('contractnumber');
        //const fileName = $(this).data('confilename');
        const filePath = $(this).data('filepath');

        $.ajax({
            url: '/admin/Account/BrowseSignofClient',
            type: 'POST',
            headers: {
                "Authorization": "Bearer " + tokenJWT
            },
            contentType: 'application/json',
            data: JSON.stringify({
                StaffId: StaffId,
                FilePath: filePath,
                ContractNumber: contractNumber
            }),
            success: function (res) {
                if (res.success) {
                    document.getElementById("contentModalSuccess").innerHTML = "Đã gửi hợp đồng thành công!";
                    $("#ModalSuccess").modal("show");

                    $('#pdfViewer').addClass('hidden');
                    $('#pendingContracts').DataTable().ajax.reload(null, false);
                } else {
                    showError("Gửi hợp đồng thất bại: " + (res.message || ""));
                }
            },
            error: function () {
                console.error("Lỗi khi duyệt:", error);
                showError("Lỗi khi duyệt hợp đồng. Vui lòng thử lại.");
            }
        });
    });

    //xác nhận hoàn tất thủ tục
    $('#pendingContracts').on('click', '.btn-approve', function () {
        const contractNumber = $(this).data('contractnumber');
        const realFilePath = $(this).data('filepath');

        if (!contractNumber) {
            showError("Không tìm thấy mã hợp đồng.");
            return;
        }

        document.getElementById("contentModalConfirm").innerHTML = "Bạn có chắc chắn muốn xác nhận hoàn tất thủ tục hợp đồng này?";
        const modalConfirmEl = document.getElementById("confirmModal");
        const modalConfirm = new bootstrap.Modal(modalConfirmEl);
        modalConfirm.show();

        // Xử lý khi bấm nút xác nhận
        $("#confirmButton1").off("click").on("click", async function () {
            modalConfirm.hide();
            $.ajax({
                url: "/admin/account/Insert", // 🔧 sửa đúng URL nếu khác
                type: "POST",
                contentType: "application/json",
                headers: {
                    "Authorization": "Bearer " + tokenJWT
                },
                data: JSON.stringify({
                    StaffId: StaffId,
                    FilePath: realFilePath,
                    ContractNumber: contractNumber
                }),
                success: function (res) {
                    if (res.success) {
                        // showSuccess("Duyệt hợp đồng thành công!");
                        document.getElementById("contentModalSuccess").innerHTML = "Xác nhận hoàn tất hợp đồng thành công!";
                        $("#ModalSuccess").modal("show");
                        backBtn3.click();
                        // Reload lại bảng để cập nhật UI
                        init("", "Tất cả");
                    } else {
                        showError("Xác nhận hoàn tất hợp đồng thất bại: " + (res.message || ""));
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Lỗi khi Xác nhận hoàn tất hợp đồng:", error);
                    showError("Lỗi khi Xác nhận hoàn tất hợp đồng. Vui lòng thử lại.");
                }
            });
        });
    });
   
    function showError(message) {
        document.getElementById("contentModalError").innerText = message;

        var errorModal = new bootstrap.Modal(document.getElementById("ModalError"), {
            keyboard: true, // Cho phép bấm phím ESC để đóng
            backdrop: 'static' // Không đóng modal khi bấm ngoài
        });
        errorModal.show();
        // Gán sự kiện đóng modal vào nút "Đóng"
        document.getElementById("btnCloseModal").addEventListener("click", function () {
            errorModal.hide();
        });
    }

</script>
